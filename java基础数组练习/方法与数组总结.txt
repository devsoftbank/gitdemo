 方法和数组章节介绍    ​    ​    ​    ​
 1：方法：就是完成特定功能的代码块，为了解决代码重复编写的问题的
    修饰符方法格式：
    ​    ​   修饰符   返回类型   方法名（参数列表）
    ​    ​    ​{方法体； return  返回值；}
   格式解析：
    ​    ​  修饰符：现阶段就使用public static
    ​    ​  返回值类型：由返回值决定的，返回的这个值是具体类型，如果一旦有明确返回值类型，那么必需有一个对应值返回
    ​    ​  方法名：为了方便调用功能，为了方便调用特定代码块
    ​    ​  参数列表：接收编写方法体所需要的参数，它可以有多个，用","隔开    ​    ​    ​    ​    ​    ​    ​
          方法体    ​：就是我们要编写的代码，功能的主体
    ​    ​    ​  return：结束方法，并将返回值返回给上层调用者
    ​    ​    ​  返回值：是方法体产生的产物，也是调用者关心的结果，有return进行返回
  如何定义一个方法？
    ​    ​   我们发现只有返回值类型和参数列表当时不好确定的，但是在编写方法体的过程中发现少什么就通过参数列表传递什么
​    ​    ​   方法体编写完成之后，结果就产生了，这样一来返回值类型也就确定了
    ​  方法的分类：
    ​    ​    ​ 有明确返回值类型的方法：
    ​    ​    ​    ​单独调用：没有任何意义，因为它是有返回值的，它是需要你接收然后自己处理这个结果的
    ​    ​    ​    ​输出调用：意义并不大，因为如果仅仅是想要输出的，那么就不必返回了，直接在方法内部输出就完事了
    ​    ​    ​    ​赋值调用：这个是有明确返回值类型方法的初衷，一般是将结果进行再加工的。
    ​    ​    ​    没有明确返回值方法：就是返回值类型写成void，这个时候就不需要返回值了，不能通过return返回任何值只能                                               通过return结束方法
   方法的注意事项：
    ​    ​    ​    ​ 1： 方法需要调用才能执行    ​    ​    ​    ​    ​    ​    ​    
				 2：方法与方法之间是平级关系，它们不能嵌套定义    ​    ​    ​    ​    ​    ​    ​    ​
				 3：方法如果有明确的返回值，那么必学通过return返回一个具体的值    ​    ​    ​    ​    ​    ​    ​    ​
				 4：方法的参数如果有多个，需要定义每个参数的类型，并用","隔开    ​    ​    ​    ​    ​
		方法重载：
    ​    ​    ​    ​ 方法名相同+方法的参数个数或者参数类型不同，和返回值类型无关
2：数组：可以存储基本数据类型，还可以存储引用数据类型
    ​    ​一维数组：
				就是一个存储相同数据类型元素的集合，其实就是一个容器
		数组的定义格式：
			数据类型[]  数组名：
			但是数组仅仅是声明了，并没有向内存申请空间，所以使用会报错，需要将数组初始化
		一维数组的初始化：
				动态初始化，由我们指定数组的长度，由系统为每个数组元素赋值
				格式1：
					数据类型[] 数组名 = new 数据类型(数组长度)；
					int[] arr = new int[4] ;   //表示定义了一个一维数组，这个数组可以存储4个int类型的值
				如何取值：
					索引：从0开始编号，最大的索引=数组的长度
					数组名[索引]
				如何赋值：
					数组名[索引] = 要赋的值；
		java内存分配：
			变量都需要先赋值,再使用
			栈：
				1存放的变量都不会赋值，需要我们手动的赋值
				2放在栈里面的变量叫局部变量，局部变量就是定义在方法里面或者参数列表上
				3方法的执行其实是在栈中执行的，又因为方法里面有变量，所以这些变量不会被赋值
				4栈中的变量会在方法执行完毕之后被释放掉
			堆：
				1：存放在堆中的变量，系统会自动为它们赋值
				2：引用类型，null
				3：byte short int long 0
				4: float double 0.0
				5: char ''
				6: boolean false
				存放在堆中的东西都是new出来的
				它们会在栈中没有引用指向的时候当做垃圾，等待着gc的回收
			静态初始化：由我们指定数组元素的值，由系统根据数组元素的个数
						决定数组的长度
				格式：
					数据类型[] 数组名 = new 数据类型[]{元素值1，元素值2，元素值3.。。。};
				简化格式：
					数据类型[] 数组名 = {元素值1，元素值2，元素值3.。。。};
			静态初始化和动态初始化不能同时存在
	二维数组
			小牛学堂每个班有很多学生，每个班的学生可以用一个数组来存储
			小牛学堂又有很多个班级，这很多个班级也可以用一个数组来存储，那么
				这个数组的元素就是一个班，一个班又是一个一维数组
			所以这样一来，这就是一个二维数组
			二维数组：就是一个数组元素为一维数组的一个数组
		格式1：
				数据类型[][] 数组名 = new 数据类型[m][n];
				m:表示这个二维数组有多少个一维数组
				n:表示每一个一维数组有多少个元素
				int[][] arr = new int[3][20]   //表示小牛学堂有3个班级，每个班级有20个学生
				取值：
					数组名[m][n]:表示获取数组的第m+1个一维数组中的n+1个元素
		格式2：
				数据类型[][] 数组名 = new 数据类型[m][];
				m:表示这个二维数组有多少个一维数组，但是每个一维数组的长度没有指定，需要我们手动指定
				int[][] arr = new int[3][]:表示我申请了一个二维数组中的三个一维数组，每个一维数组的长度没有指定
				arr[0] = new int[5];    //第一个一维数组的长度为5
				arr[1] = new int[3];    //第二个一维数组的长度为3
				arr[2] = new int[4];    //第三个一维数组的长度为4
		格式3：
				数据类型[][] 数组名 = 数据类型[][]{{元素1,元素2,元素3},{元素1,元素2,元素3},{元素1,元素2,元素3}};
		简化格式：
				数据类型[][] 数组名 = {{元素1,元素2,元素3},{元素1,元素2,元素3},{元素1,元素2,元素3}};
									大括号里面有多少个大括号就表明这个二维数组有多少个一维数组
									最里面的大括号有多少个元素，就表明当前的一维数组的长度为多少

				    ​    ​    ​    ​    ​
    ​    ​    ​    ​    ​
    ​    ​    ​    ​    ​    ​    ​    ​