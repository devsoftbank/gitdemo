1:选择结构
	if语句
		if(表达式1){
			语句体1;
		}else if(表达式2){
			语句体2;
		}else if(表达式3){
			语句体3;
		}
		........
		else{
			语句体n;
		}
		执行流程：
			执行表达式1的值，看其结果是true还是false
			如果是true，则执行语句体1
			如果是false执行表达式2的值，看其结果是true还是false
			如果是true，则执行语句体2
			如果是false执行表达式3的值，看其结果是true还是false
			如果是true, 则执行语句体3
			...........
			如果上述条件都不满足，则执行else里面的语句体n+1
		注意事项：
			if后面的表达式的值都是boolean类型的
			if默认只能控制一条语句体，建议不要将大括号省略
	switch语句：
		switch(表达式){
			case 常量值1：
				语句体1;
				break;
			case 常量值2：
				语句体2;
				break;
			case 常量值3：
				语句体3;
				break;
			........
			default:
				语句体;
				break;
		}
	格式解析：
		表达式可以取得值：byte short int long char String
		case：表示匹配的意思，后面的常量值和表达式的值进行匹配
		语句体:就是我们要做的事情，可以是一条或者多条语句
		break：是结束switch语句的
		default：当所有的case都不匹配时，就执行default里面的语句
	执行流程：
		首先计算出表达式的值，然后和case后面的常量值进行匹配，一旦
		匹配成功就执行里面的语句体，知道遇到break才会结束，如果没有
		匹配成功且有default就执行default里面的默认语句体
	注意事项：
		case后面只能是常量值
		case和default的顺序可以随意，没有前后之分
		break也是可以省略的，如果你不需要默认值，是可以省略的，它相当于
			if语句中的else
		switch什么时候会结束？
			遇到break
			执行完毕了switch语句
2:循环结构
	for语句：
		for(初始化语句；判断条件语句；控制条件语句){
			循环体语句；
		}
	执行流程：
		A:执行初始化语句
		B：执行判断条件语句，看其结果是true还是false
			如果是true，继续C步骤
			如果是false，结束for循环
		C:执行循环体语句
		D:执行控制条件语句，然后回到B步骤
	while语句：
		初始化语句；
		while(判断条件语句){
			循环体语句；
			控制条件语句；
		}
	执行流程：
		A：执行初始化语句
		B: 执行判断条件语句，看其结果是true还是false
			如果是true，则继续C步骤
			如果是false，结束while循环
		C：执行循环体语句
		D: 执行控制条件语句，然后回到B步骤
	do...while语句
		初始化语句；
		do{
			循环体语句；
			控制条件语句；
		}while(条件判断语句)；
	执行流程：
		A：执行初始化语句
		B: 执行循环体语句
		C: 执行控制条件语句
		D: 执行判断条件语句
			如果是true则继续步骤B
			如果是false，则结束循环
	while：更适合求未知数的循环，因为在while循环结束之后，初始化
		的那个变量还能被访问
	for：更适合做固定范围之内的循环
	do.....while:更适合做循环体语句要被执行一次的循环
	while和for它们的循环体语句只有在判断条件返回结果为true的时候
		才能执行
	do...while它的循环体语句至少会被执行一次
3:跳转控制语句
	break语句：中断当前循环的意思
	continue语句：结束本次循环，直接开始下次循环
	return语句：结束当前的方法，将执行权交给上层
	
